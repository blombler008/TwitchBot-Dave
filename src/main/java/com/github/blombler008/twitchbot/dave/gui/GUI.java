package com.github.blombler008.twitchbot.dave.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.extras.FlatAnimatedLafChange;
import com.github.blombler008.twitchbot.dave.core.Validator;
import com.github.blombler008.twitchbot.dave.core.config.ApplicationConfig;
import com.github.blombler008.twitchbot.dave.gui.configPanels.ApplicationPanel;
import com.github.blombler008.twitchbot.dave.gui.configPanels.TwitchPanel;
import com.github.blombler008.twitchbot.dave.main.Load;
import com.github.blombler008.twitchbot.dave.main.configs.TwitchConfig;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;

public class GUI extends JFrame {

    private JPanel config;
    private JPanel console;
    private JPanel consoleLog;
    private JPanel consoleInput;
    private JButton consoleSend;
    private JTextField consoleInputText;
    private JTextPane consoleTextPane;
    private JScrollPane consoleScrollPane;
    private JTabbedPane rootPane;
    private JScrollPane configTree;
    private JPanel configPaneContainer;
    private JSplitPane configSpitPane;
    private JButton configApply;
    private JButton configReset;
    private JButton configCancel;
    private JLabel configChangesLabel;
    private JScrollPane configPanel;
    private Dimension size = new Dimension(1024, 576);
    private Dimension minSize = new Dimension(260, 180);

    private TrayIcon tray;

    private AtomicReference<JPanel> selectedConfig;
    private Load load;

    public GUI(Load load) {
        this.load = load;

// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        this.$$$setupUI$$$();
        this.setConfigPanel(selectedConfig.get());

        rootPane.setFocusable(false);
        rootPane.addChangeListener(this::rootTabbedPaneStateChanged);


    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPane.setFocusCycleRoot(true);
        rootPane.setRequestFocusEnabled(false);
        console = new JPanel();
        console.setLayout(new BorderLayout(5, 5));
        rootPane.addTab("Console", console);
        consoleLog = new JPanel();
        consoleLog.setLayout(new BorderLayout(0, 0));
        console.add(consoleLog, BorderLayout.CENTER);
        consoleScrollPane = new JScrollPane();
        consoleLog.add(consoleScrollPane, BorderLayout.CENTER);
        consoleTextPane = new JTextPane();
        consoleTextPane.setEditable(false);
        consoleScrollPane.setViewportView(consoleTextPane);
        consoleInput = new JPanel();
        consoleInput.setLayout(new BorderLayout(5, 5));
        console.add(consoleInput, BorderLayout.SOUTH);
        consoleSend.setFocusCycleRoot(true);
        consoleSend.setFocusPainted(true);
        consoleSend.setLabel("Send");
        consoleSend.setSelected(true);
        consoleSend.setText("Send");
        consoleInput.add(consoleSend, BorderLayout.EAST);
        consoleInputText.setText("");
        consoleInput.add(consoleInputText, BorderLayout.CENTER);
        config = new JPanel();
        config.setLayout(new BorderLayout(0, 0));
        rootPane.addTab("Config", config);
        configSpitPane.setContinuousLayout(true);
        configSpitPane.setResizeWeight(0.0);
        config.add(configSpitPane, BorderLayout.CENTER);
        configTree.setAutoscrolls(true);
        configSpitPane.setLeftComponent(configTree);
        configPaneContainer.setLayout(new BorderLayout(0, 0));
        configSpitPane.setRightComponent(configPaneContainer);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        configPaneContainer.add(panel1, BorderLayout.SOUTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 0));
        panel2.setAutoscrolls(false);
        panel1.add(panel2, BorderLayout.EAST);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        configReset = new JButton();
        configReset.setEnabled(false);
        configReset.setLabel("Reset");
        configReset.setPreferredSize(new Dimension(68, 22));
        configReset.setText("Reset");
        panel2.add(configReset);
        configCancel = new JButton();
        configCancel.setLabel("Cancel");
        configCancel.setPreferredSize(new Dimension(68, 22));
        configCancel.setText("Cancel");
        panel2.add(configCancel);
        configApply.setLabel("Apply");
        configApply.setPreferredSize(new Dimension(68, 22));
        configApply.setSelected(true);
        configApply.setText("Apply");
        panel2.add(configApply);
        configChangesLabel = new JLabel();
        configChangesLabel.setDoubleBuffered(false);
        configChangesLabel.setFocusCycleRoot(false);
        configChangesLabel.setFocusTraversalPolicyProvider(false);
        configChangesLabel.setFocusable(true);
        configChangesLabel.setHorizontalAlignment(11);
        configChangesLabel.setHorizontalTextPosition(11);
        configChangesLabel.setText("");
        configChangesLabel.setVerticalAlignment(0);
        configChangesLabel.setVerticalTextPosition(0);
        panel1.add(configChangesLabel, BorderLayout.CENTER);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return rootPane;
    }

    private void createUIComponents() {
        rootPane = new JTabbedPane(SwingConstants.TOP, JTabbedPane.WRAP_TAB_LAYOUT);
        rootPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        consoleInputText = new JTextField();
        consoleInputText.setText("");
        consoleInputText.putClientProperty("JTextField.placeholderText", "Command");
        consoleSend = new JButton();
        consoleSend.setText("Send");
        consoleSend.setSelected(true);
        configApply = new JButton();
        configApply.addActionListener(e -> apply());
        configSpitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        configSpitPane.setDividerLocation(170);
        this.createConfigComponents();
    }

    private void rootTabbedPaneStateChanged(ChangeEvent e) {
        if (console.isShowing()) {
            consoleSend.requestFocus();
        }
        if (config.isShowing()) {
            configApply.requestFocus();
        }
    }


    public Dimension getDimension() {
        return size;
    }

    public Dimension getMinimumDimension() {
        return minSize;
    }

    public void createConfigComponents() {
        selectedConfig = new AtomicReference<>(new ApplicationPanel(this));

        Node root = new Node("root", "root");

        Node applicationNode = new Node("Application", "root.application");
        applicationNode.setPanel(selectedConfig.get());
        root.asTreeNode().add(applicationNode.asTreeNode());

        Node twitchNode = new Node("Twitch", "root.twitch");
        twitchNode.setPanel(new TwitchPanel(this));
        root.asTreeNode().add(twitchNode.asTreeNode());

        Node generalNode = new Node("General", "root.general");
        root.asTreeNode().add(generalNode.asTreeNode());


        Node gameNode = new Node("Game", "root.game");
        root.asTreeNode().add(gameNode.asTreeNode());

        Node gameCatchNode = new Node("Catch", "root.game.catch");
        gameNode.asTreeNode().add(gameCatchNode.asTreeNode());

        Node gameCatchWebNode = new Node("Web", "root.game.catch.web");
        gameCatchNode.asTreeNode().add(gameCatchWebNode.asTreeNode());

        Node gameCatchGeneralNode = new Node("General", "root.game.catch.general");
        gameCatchNode.asTreeNode().add(gameCatchGeneralNode.asTreeNode());

        Node gameDiceNode = new Node("Dice", "root.game.dice");
        gameNode.asTreeNode().add(gameDiceNode.asTreeNode());


        final JTree jConfigTree = new JTree(root.asTreeNode());
        final DefaultTreeCellRenderer cellRenderer = new DefaultTreeCellRenderer();
        cellRenderer.setIcon(null);
        cellRenderer.setClosedIcon(null);
        cellRenderer.setLeafIcon(null);
        cellRenderer.setOpenIcon(null);
        cellRenderer.setDisabledIcon(null);

        jConfigTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jConfigTree.getSelectionModel().setSelectionPath(getPath(applicationNode.asTreeNode()));
        jConfigTree.setCellRenderer(cellRenderer);
        jConfigTree.putClientProperty("JTree.lineStyle", "Horizontal");
        jConfigTree.setRootVisible(false);
        jConfigTree.setShowsRootHandles(true);


        jConfigTree.setUI(new BasicTreeUI() {
            protected void paintHorizontalLine(Graphics g, JComponent c, int y, int left, int right) {
                if (getApplicationConfig().isTreeLinesShowen()) super.paintHorizontalLine(g, c, y, left, right);
            }

            protected void paintVerticalLine(Graphics g, JComponent c, int x, int top, int bottom) {
                if (getApplicationConfig().isTreeLinesShowen()) super.paintVerticalLine(g, c, x, top, bottom);
            }
        });
        configPaneContainer = new JPanel();
        configSpitPane.setRightComponent(configPaneContainer);
        configPanel = new JScrollPane(selectedConfig.get());

        configTree = new JScrollPane(jConfigTree);

        jConfigTree.addTreeSelectionListener(e -> {
            Node node = (Node) ((DefaultMutableTreeNode) e.getNewLeadSelectionPath().getLastPathComponent()).getUserObject();
            if (Objects.nonNull(node.getPanel())) {
                selectedConfig.set(node.getPanel());
                this.setConfigPanel(selectedConfig.get());
                this.apply();
            }

        });
    }

    private void setConfigPanel(JPanel jPanel) {
        configPaneContainer.remove(configPanel);
        configPanel = new JScrollPane(jPanel);
        configPaneContainer.add(configPanel, BorderLayout.CENTER);
    }

    public boolean apply() {
        try {

            if (Objects.nonNull(configPanel) && configPanel.getComponentCount() >= 1) {
                if (configPanel.getComponent(0) instanceof JViewport) {


                    Component c = ((JViewport) configPanel.getComponents()[0]).getComponent(0);
                    if (Objects.nonNull(c)) {
                        if (c instanceof ConfigPanel) {
                            ((ConfigPanel) c).apply();
                        }
                    }
                }
            }

            if (this.getApplicationConfig().isLightTheme()) {
                FlatLightLaf.install();
            } else {
                FlatDarkLaf.install();
            }


            this.repaint();

            FlatAnimatedLafChange.showSnapshot();
            FlatLaf.updateUI();
            FlatAnimatedLafChange.hideSnapshotWithAnimation();



            Runnable runner = this.showSystemTray();
            if (Validator.isNotNull(runner)) {
                EventQueue.invokeLater(runner);
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private Runnable showSystemTray() {
        if (SystemTray.isSupported() && !GraphicsEnvironment.isHeadless()) {
            return () -> {
                try {
                    SystemTray systemTray = SystemTray.getSystemTray();

                    if (!Validator.isNotNull(tray)) {
                        tray = new TrayIcon(getIconImage(), getTitle());
                        tray.setImageAutoSize(true);

                    }
                    if (this.getApplicationConfig().isSystemTrayEnabled()) {
                        tray.setToolTip(getTitle());
                        try {
                            systemTray.add(tray);
                        } catch (IllegalArgumentException ignore) {

                        }
                    } else {
                        systemTray.remove(tray);
                    }
                } catch (UnsupportedOperationException | SecurityException | AWTException e) {
                    e.printStackTrace();
                }
            };

        }
        return null;

    }

    public boolean isTreeLinesShowen() {
        return this.getApplicationConfig().isTreeLinesShowen();
    }

    public void setShowLines(boolean showLines) {
        this.getApplicationConfig().setShowTreeLines(showLines);
    }

    public static TreePath getPath(TreeNode treeNode) {
        List<Object> nodes = new ArrayList<Object>();
        if (treeNode != null) {
            nodes.add(treeNode);
            treeNode = treeNode.getParent();
            while (treeNode != null) {
                nodes.add(0, treeNode);
                treeNode = treeNode.getParent();
            }
        }

        return nodes.isEmpty() ? null : new TreePath(nodes.toArray());
    }

    public String getDefaultTitle() {
        return load.getApplicationConfig().getTitle();
    }

    public ApplicationConfig getApplicationConfig() {
        return load.getApplicationConfig();
    }

    public Load getLoad() {
        return load;
    }

    public void setSystemTray(boolean systemTrayEnable) {
        this.getApplicationConfig().setSystemTrayEnable(systemTrayEnable);
    }

    public void setLightTheme(boolean isLightTheme) {
        this.getApplicationConfig().setLightTheme(isLightTheme);
    }

    public TwitchConfig getTwitchConfig() {
        return load.getTwitchConfig();
    }
}
